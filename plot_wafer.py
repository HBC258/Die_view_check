# -*- coding: utf-8 -*-
"""
Created on Tue Mar 25 15:50:47 2025

@author: 74080
"""
#!/usr/bin/env python
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib import cm
import numpy as np

def plot_wafer_map(df_fom, metric, title=None):
    """
    Visualizes the wafer map for a given FoM metric.
    Automatically shifts negative coordinates to a zero-based grid.

    Parameters:
      df_fom : DataFrame
          The FoM summary DataFrame containing at least 'x', 'y', and the specified metric.
      metric : str
          The FoM column to visualize (e.g., "SS_min (V/dec)", "VTH (V)", etc.)
      title : str, optional
          Title for the figure.
    """
    # Determine min and max of x,y from the data.
    min_x = int(df_fom['x'].min())
    max_x = int(df_fom['x'].max())
    min_y = int(df_fom['y'].min())
    max_y = int(df_fom['y'].max())

    # Compute grid size.
    width = max_x - min_x + 1
    height = max_y - min_y + 1

    # Offsets so that the smallest coordinates become zero.
    offset_x = -min_x if min_x < 0 else 0
    offset_y = -min_y if min_y < 0 else 0

    fig, ax = plt.subplots(figsize=(width, height))
    ax.set_xlim(0, width)
    ax.set_ylim(0, height)
    ax.set_aspect('equal')
    ax.axis('off')

    # Set colorbar limits based on the metric.
    if metric == "Gm_max @1V (µA/µm per V)":
        vmin, vmax = 0, 20
    elif metric == "VTH (V)":
        vmin, vmax = -2, 2
    elif metric == "Hysteresis (V)":
        vmin, vmax = 0, 2
    elif metric == "SS_min (V/dec)":
        vmin, vmax = 0.06, 0.2
    else:
        # Default: use valid values in the data.
        valid_values = df_fom[metric].dropna()
        if not valid_values.empty:
            vmin = valid_values.min()
            vmax = valid_values.max()
        else:
            vmin, vmax = 0, 1

    norm = plt.Normalize(vmin=vmin, vmax=vmax)
    cmap = cm.viridis

    # Draw full grid (all cells gray by default).
    for i in range(height):
        for j in range(width):
            rect = patches.Rectangle((j, height - i - 1), 1, 1, edgecolor="black", facecolor="lightgrey")
            ax.add_patch(rect)

    # Plot each device's FoM based on its shifted (x, y) coordinate.
    for _, row in df_fom.iterrows():
        raw_x = row['x']
        raw_y = row['y']
        val = row[metric]
        x = int(raw_x + offset_x)
        y = int(raw_y + offset_y)
        # Only plot if coordinates fall within the grid.
        if x < 0 or x >= width or y < 0 or y >= height:
            continue
        if pd.isna(val):
            color = "grey"
            text = "NaN"
        else:
            color = cmap(norm(val))
            text = f"{val:.2f}"
        rect = patches.Rectangle((x, height - y - 1), 1, 1, edgecolor="black", facecolor=color)
        ax.add_patch(rect)
        ax.text(x + 0.5, height - y - 0.5, text, ha="center", va="center", fontsize=8, color="white")

    if title:
        ax.set_title(title)

    # Add colorbar.
    sm = cm.ScalarMappable(cmap=cmap, norm=norm)
    sm.set_array([])
    cbar = fig.colorbar(sm, ax=ax, fraction=0.046, pad=0.04)
    cbar.set_label(metric)
    
    plt.show()

if __name__ == "__main__":
    # Load the FoM summary DataFrame generated by your extraction script.
    df_fom = pd.read_csv("FoM_summary.csv")
    
    # Plot wafer maps for each FoM metric.
    plot_wafer_map(df_fom, "SS_min (V/dec)", title="Wafer Map: SS_min (V/dec)")
    plot_wafer_map(df_fom, "VTH (V)", title="Wafer Map: VTH (V)")
    plot_wafer_map(df_fom, "Hysteresis (V)", title="Wafer Map: Hysteresis (V)")
    plot_wafer_map(df_fom, "Gm_max @1V (µA/µm per V)", title="Wafer Map: Gm_max @1V")
